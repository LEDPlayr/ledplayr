import type { OptionsLegacyParser } from "@hey-api/client-fetch";
import type {
  DelButtonData,
  DelButtonError,
  DelButtonResponse,
  DelMeshData,
  DelMeshError,
  DelMeshResponse,
  DelPlaylistData,
  DelPlaylistError,
  DelPlaylistResponse,
  DelSceneData,
  DelSceneError,
  DelSceneResponse,
  DelScheduleData,
  DelScheduleError,
  DelScheduleResponse,
  DelSequenceData,
  DelSequenceError,
  DelSequenceResponse,
  DownloadMeshData,
  DownloadMeshError,
  DownloadMeshResponse,
  FileUploadData,
  FileUploadError,
  FileUploadResponse,
  FppCommandData,
  FppCommandError,
  FppCommandResponse,
  GetButtonData,
  GetButtonError,
  GetButtonResponse,
  GetDisplayError,
  GetDisplayResponse,
  GetLogData,
  GetLogError,
  GetLogResponse,
  GetOutputsError,
  GetOutputsResponse,
  GetPlaylistData,
  GetPlaylistError,
  GetPlaylistResponse,
  GetSceneData,
  GetSceneError,
  GetSceneResponse,
  GetScheduleData,
  GetScheduleError,
  GetScheduleResponse,
  GetSequenceData,
  GetSequenceError,
  GetSequenceMetaData,
  GetSequenceMetaError,
  GetSequenceMetaResponse,
  GetSequenceResponse,
  GetStatusError,
  GetStatusResponse,
  GetTestPatternData,
  GetTestPatternError,
  GetTestPatternResponse,
  ListButtonsError,
  ListButtonsResponse,
  ListLogsError,
  ListLogsResponse,
  ListMeshesError,
  ListMeshesResponse,
  ListModelsError,
  ListModelsResponse,
  ListPlaylistsError,
  ListPlaylistsNumberedError,
  ListPlaylistsNumberedResponse,
  ListPlaylistsResponse,
  ListScenesError,
  ListScenesResponse,
  ListSchedulesError,
  ListSchedulesResponse,
  ListSequencesError,
  ListSequencesResponse,
  NewButtonData,
  NewButtonError,
  NewButtonResponse,
  NewMeshData,
  NewMeshError,
  NewMeshResponse,
  NewPlaylistData,
  NewPlaylistError,
  NewPlaylistResponse,
  NewSceneData,
  NewSceneError,
  NewSceneResponse,
  NewScheduleData,
  NewScheduleError,
  NewScheduleResponse,
  RunTestData,
  RunTestError,
  RunTestResponse,
  StartSchedulerError,
  StartSchedulerResponse,
  StopError,
  StopResponse,
  SystemInfoError,
  SystemInfoResponse,
  UpdateButtonData,
  UpdateButtonError,
  UpdateButtonResponse,
  UpdateMeshData,
  UpdateMeshError,
  UpdateMeshResponse,
  UpdatePlaylistData,
  UpdatePlaylistError,
  UpdatePlaylistResponse,
  UpdateSceneData,
  UpdateSceneError,
  UpdateSceneResponse,
  UpdateScheduleData,
  UpdateScheduleError,
  UpdateScheduleResponse,
  UploadDisplayData,
  UploadDisplayError,
  UploadDisplayResponse,
  UploadModelsData,
  UploadModelsError,
  UploadModelsResponse,
  UploadOutputsData,
  UploadOutputsError,
  UploadOutputsResponse,
} from "./types.gen";

import { createClient, createConfig, formDataBodySerializer } from "@hey-api/client-fetch";

// This file is auto-generated by @hey-api/openapi-ts

export const client = createClient(createConfig());

/**
 * New button
 * Create a new button
 */
export const newButton = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<NewButtonData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<NewButtonResponse, NewButtonError, ThrowOnError>({
    ...options,
    url: "/api/button",
  });
};

/**
 * Get a button
 * Get a single button
 */
export const getButton = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetButtonData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetButtonResponse, GetButtonError, ThrowOnError>({
    ...options,
    url: "/api/button/{button}",
  });
};

/**
 * Update a button
 * Update the given button
 */
export const updateButton = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdateButtonData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateButtonResponse, UpdateButtonError, ThrowOnError>(
    {
      ...options,
      url: "/api/button/{button}",
    },
  );
};

/**
 * Delete a button
 * Delete the given button
 */
export const delButton = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DelButtonData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<DelButtonResponse, DelButtonError, ThrowOnError>({
    ...options,
    url: "/api/button/{button}",
  });
};

/**
 * List all buttons
 * List all remote buttons
 */
export const listButtons = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListButtonsResponse, ListButtonsError, ThrowOnError>({
    ...options,
    url: "/api/buttons",
  });
};

/**
 * Retrieve outputs.json
 * Download the outputs in JSON format
 */
export const getOutputs = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetOutputsResponse, GetOutputsError, ThrowOnError>({
    ...options,
    url: "/api/channel/output/universeOutputs",
  });
};

/**
 * Upload outputs.json
 * Upload the outputs in JSON format
 */
export const uploadOutputs = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UploadOutputsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UploadOutputsResponse,
    UploadOutputsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/channel/output/universeOutputs",
  });
};

/**
 * Retrieve VirtualDisplayMap
 * Download the VirtualDisplayMap
 */
export const getDisplay = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetDisplayResponse, GetDisplayError, ThrowOnError>({
    ...options,
    url: "/api/configfile/virtualdisplaymap",
  });
};

/**
 * Upload VirtualDisplayMap
 * Upload the VirtualDisplayMap
 */
export const uploadDisplay = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UploadDisplayData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UploadDisplayResponse,
    UploadDisplayError,
    ThrowOnError
  >({
    ...options,
    url: "/api/configfile/virtualdisplaymap",
  });
};

/**
 * Get a specific log
 */
export const getLog = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetLogData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetLogResponse, GetLogError, ThrowOnError>({
    ...options,
    url: "/api/log/{name}",
  });
};

/**
 * Get log filenames
 */
export const listLogs = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListLogsResponse, ListLogsError, ThrowOnError>({
    ...options,
    url: "/api/logs",
  });
};

/**
 * New mesh
 * Create a new mesh
 */
export const newMesh = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<NewMeshData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<NewMeshResponse, NewMeshError, ThrowOnError>({
    ...options,
    url: "/api/mesh",
  });
};

/**
 * Get a 3D mesh
 * Download a 3D mesh for the virtual display
 */
export const downloadMesh = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DownloadMeshData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<DownloadMeshResponse, DownloadMeshError, ThrowOnError>(
    {
      ...options,
      url: "/api/mesh/{mesh}",
    },
  );
};

/**
 * Update a mesh
 * Create or update the given mesh
 */
export const updateMesh = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdateMeshData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateMeshResponse, UpdateMeshError, ThrowOnError>({
    ...options,
    url: "/api/mesh/{mesh}",
  });
};

/**
 * Delete a mesh
 * Delete the given mesh
 */
export const delMesh = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DelMeshData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<DelMeshResponse, DelMeshError, ThrowOnError>({
    ...options,
    url: "/api/mesh/{mesh}",
  });
};

/**
 * List all meshes
 * List all 3D meshes
 */
export const listMeshes = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListMeshesResponse, ListMeshesError, ThrowOnError>({
    ...options,
    url: "/api/meshes",
  });
};

/**
 * Retrieve models.json
 * Download the models in JSON format
 */
export const listModels = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListModelsResponse, ListModelsError, ThrowOnError>({
    ...options,
    url: "/api/models",
  });
};

/**
 * Upload models.json
 * Upload the models in JSON format
 */
export const uploadModels = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UploadModelsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UploadModelsResponse,
    UploadModelsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/models",
  });
};

/**
 * Get the player status
 */
export const getStatus = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetStatusResponse, GetStatusError, ThrowOnError>({
    ...options,
    url: "/api/player",
  });
};

/**
 * Start the player scheduling
 */
export const startScheduler = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    StartSchedulerResponse,
    StartSchedulerError,
    ThrowOnError
  >({
    ...options,
    url: "/api/player/schedule",
  });
};

/**
 * Stop the player
 */
export const stop = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<StopResponse, StopError, ThrowOnError>({
    ...options,
    url: "/api/player/stop",
  });
};

/**
 * Run LED test patterns
 */
export const runTest = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<RunTestData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<RunTestResponse, RunTestError, ThrowOnError>({
    ...options,
    url: "/api/player/test",
  });
};

/**
 * New playlist
 * Create a new playlist
 */
export const newPlaylist = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<NewPlaylistData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<NewPlaylistResponse, NewPlaylistError, ThrowOnError>({
    ...options,
    url: "/api/playlist",
  });
};

/**
 * Get a playlist
 * Read back a playlist
 */
export const getPlaylist = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetPlaylistData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetPlaylistResponse, GetPlaylistError, ThrowOnError>({
    ...options,
    url: "/api/playlist/{playlist}",
  });
};

/**
 * Update a playlist
 * Create or update the given playlist
 */
export const updatePlaylist = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdatePlaylistData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdatePlaylistResponse,
    UpdatePlaylistError,
    ThrowOnError
  >({
    ...options,
    url: "/api/playlist/{playlist}",
  });
};

/**
 * Delete a playlist
 * Delete the given playlist
 */
export const delPlaylist = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DelPlaylistData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DelPlaylistResponse,
    DelPlaylistError,
    ThrowOnError
  >({
    ...options,
    url: "/api/playlist/{playlist}",
  });
};

/**
 * List playlists
 * List the name of all playlists
 */
export const listPlaylists = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListPlaylistsResponse,
    ListPlaylistsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/playlists",
  });
};

/**
 * List playlists with ID
 * List the playlists with their ID
 */
export const listPlaylistsNumbered = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListPlaylistsNumberedResponse,
    ListPlaylistsNumberedError,
    ThrowOnError
  >({
    ...options,
    url: "/api/playlists/numbered",
  });
};

/**
 * New scene
 * Create a new scene
 */
export const newScene = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<NewSceneData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<NewSceneResponse, NewSceneError, ThrowOnError>({
    ...options,
    url: "/api/scene",
  });
};

/**
 * Delete a scene
 * Delete the given scene
 */
export const delScene = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DelSceneData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<DelSceneResponse, DelSceneError, ThrowOnError>({
    ...options,
    url: "/api/scene/{scene}",
  });
};

/**
 * List scenes
 * List all scenes
 */
export const listScenes = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListScenesResponse, ListScenesError, ThrowOnError>({
    ...options,
    url: "/api/scenes",
  });
};

/**
 * Get a scene
 * Read a single scene
 */
export const getScene = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetSceneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetSceneResponse, GetSceneError, ThrowOnError>({
    ...options,
    url: "/api/scenes/{scene}",
  });
};

/**
 * Update a scene
 * Create or update the given scene
 */
export const updateScene = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdateSceneData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateSceneResponse, UpdateSceneError, ThrowOnError>({
    ...options,
    url: "/api/scenes/{scene}",
  });
};

/**
 * New schedule
 * Create a new schedule
 */
export const newSchedule = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<NewScheduleData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<NewScheduleResponse, NewScheduleError, ThrowOnError>({
    ...options,
    url: "/api/schedule",
  });
};

/**
 * Get a schedule
 * Read back a schedule
 */
export const getSchedule = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetScheduleData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetScheduleResponse, GetScheduleError, ThrowOnError>({
    ...options,
    url: "/api/schedule/{schedule}",
  });
};

/**
 * Update a schedule
 * Create or update the given schedule
 */
export const updateSchedule = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdateScheduleData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateScheduleResponse,
    UpdateScheduleError,
    ThrowOnError
  >({
    ...options,
    url: "/api/schedule/{schedule}",
  });
};

/**
 * Delete a schedule
 * Delete the given schedule
 */
export const delSchedule = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DelScheduleData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DelScheduleResponse,
    DelScheduleError,
    ThrowOnError
  >({
    ...options,
    url: "/api/schedule/{schedule}",
  });
};

/**
 * List schedules
 * List the name of all schedules
 */
export const listSchedules = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListSchedulesResponse,
    ListSchedulesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/schedules",
  });
};

/**
 * Get a sequence
 * Download a sequence file
 */
export const getSequence = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetSequenceData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetSequenceResponse, GetSequenceError, ThrowOnError>({
    ...options,
    url: "/api/sequence/{filename}",
  });
};

/**
 * Delete a sequence
 * Remove a sequence file
 */
export const delSequence = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DelSequenceData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DelSequenceResponse,
    DelSequenceError,
    ThrowOnError
  >({
    ...options,
    url: "/api/sequence/{filename}",
  });
};

/**
 * Get a sequence's metadata
 * Get the metadata belonging to a sequence
 */
export const getSequenceMeta = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetSequenceMetaData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSequenceMetaResponse,
    GetSequenceMetaError,
    ThrowOnError
  >({
    ...options,
    url: "/api/sequence/{filename}/meta",
  });
};

/**
 * List all sequences
 * List all sequence files
 */
export const listSequences = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListSequencesResponse,
    ListSequencesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/sequences",
  });
};

/**
 * Get system info.
 * Get the high-level system information. This endpoint is used
 * to simulate FPP and make us discoverable by other software such
 * as xLights. Some values are hard-coded to ensure compatibility.
 */
export const systemInfo = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<SystemInfoResponse, SystemInfoError, ThrowOnError>({
    ...options,
    url: "/api/system/info",
  });
};

/**
 * Get the pattern of LED colors for the given test
 */
export const getTestPattern = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetTestPatternData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    GetTestPatternResponse,
    GetTestPatternError,
    ThrowOnError
  >({
    ...options,
    url: "/api/test_pattern",
  });
};

/**
 * Upload a file
 * Accepts fseq sequences or media files such as
 * images and videos. The uploaded file is automatically
 * sorted into the relevant upload directory so a call to
 * `moveFile` isn't required and will be ignore.
 */
export const fileUpload = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<FileUploadData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<FileUploadResponse, FileUploadError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
    url: "/api/upload",
  });
};

/**
 * Run an FPP Command
 * This method isn't really implemented. The only command you
 * can issue is `moveFile` and all that really does is check
 * whether a file exists or not - it doesn't move it because
 * that's handled at upload time.
 */
export const fppCommand = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<FppCommandData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<FppCommandResponse, FppCommandError, ThrowOnError>({
    ...options,
    url: "/fppxml.php",
  });
};
